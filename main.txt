import os
import json
import fitz  # PyMuPDF
from datetime import datetime
from typing import Dict, Any, Optional, List
from whoosh.index import create_in, open_dir
from whoosh.fields import Schema, TEXT, ID, STORED
from whoosh.qparser import QueryParser, MultifieldParser
from whoosh.analysis import StemmingAnalyzer
from whoosh.highlight import ContextFragmenter, HtmlFormatter, Highlighter
import re
import sys

class PDFProcessor:
    def __init__(self, pdf_dir: str):
        self.pdf_dir = pdf_dir

    def extract_text_from_pdf(self, pdf_path: str) -> Optional[Dict]:
        """Extract text from a PDF file page by page."""
        try:
            document = fitz.open(pdf_path)
            text_data = {
                "filename": os.path.basename(pdf_path),
                "total_pages": len(document),
                "pages": {},
                "timestamp": None  # Add timestamp field
            }
            
            # Try to extract timestamp from first page
            first_page = document.load_page(0)
            first_page_text = first_page.get_text()
            
            # Look for timestamp patterns (you can modify this pattern based on your PDF format)
            timestamp_patterns = [
                r'\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}',  # YYYY-MM-DD HH:MM:SS
                r'\d{2}/\d{2}/\d{4}\s+\d{2}:\d{2}:\d{2}',  # MM/DD/YYYY HH:MM:SS
                r'\d{2}-\d{2}-\d{4}\s+\d{2}:\d{2}:\d{2}',  # DD-MM-YYYY HH:MM:SS
            ]
            
            for pattern in timestamp_patterns:
                match = re.search(pattern, first_page_text)
                if match:
                    text_data["timestamp"] = match.group(0)
                    break
            
            for page_num in range(len(document)):
                page = document.load_page(page_num)
                text = page.get_text()
                text_data["pages"][page_num] = text
                
            return text_data
        except Exception as e:
            print(f"Error extracting text from {pdf_path}: {e}")
            return None

    def extract_all_pdfs(self) -> List[Dict]:
        """Extract text from all PDFs in the directory."""
        extracted_data = []
        
        for filename in os.listdir(self.pdf_dir):
            if filename.lower().endswith('.pdf'):
                pdf_path = os.path.join(self.pdf_dir, filename)
                data = self.extract_text_from_pdf(pdf_path)
                if data:
                    extracted_data.append(data)
        
        return extracted_data

class SearchEngine:
    def __init__(self, index_dir: str):
        self.index_dir = index_dir
        self.schema = Schema(
            doc_id=ID(stored=True),
            filename=TEXT(stored=True),
            page_num=STORED,
            content=TEXT(analyzer=StemmingAnalyzer(), stored=True),
            timestamp=STORED
        )
        
        if not os.path.exists(index_dir):
            os.makedirs(index_dir)
            self.index = create_in(index_dir, self.schema)
        else:
            try:
                self.index = open_dir(index_dir)
            except:
                self.index = create_in(index_dir, self.schema)

    def index_documents(self, documents: List[Dict]) -> None:
        """Index the extracted documents."""
        writer = self.index.writer()
        
        for doc in documents:
            filename = doc["filename"]
            timestamp = doc.get("timestamp", "")  # Get timestamp if available
            for page_num, text in doc["pages"].items():
                doc_id = f"{filename}:{page_num}"
                writer.add_document(
                    doc_id=doc_id,
                    filename=filename,
                    page_num=int(page_num),
                    content=text,
                    timestamp=timestamp  # Add timestamp to index
                )
        
        writer.commit()

    def search(self, query_text: str) -> Dict:
        """Perform a search against the index."""
        if not query_text or not query_text.strip():
            return {"results": [], "total": 0, "file_count": 0}
            
        try:
            parser = MultifieldParser(["content", "filename"], schema=self.index.schema)
            query = parser.parse(query_text)
            
            formatter = HtmlFormatter(tagname="em", classname="", termclass="")
            fragmenter = ContextFragmenter(maxchars=100, surround=50)
            highlighter = Highlighter(formatter=formatter, fragmenter=fragmenter)
            
            with self.index.searcher() as searcher:
                results = searcher.search(query, limit=1000)
                
                search_results = []
                for hit in results:
                    content = hit.get("content", "")
                    highlighted = highlighter.highlight_hit(hit, "content")
                    
                    if highlighted:
                        result = {
                            "filename": hit.get("filename", "Unknown"),
                            "page": hit.get("page_num", 0),
                            "highlight": highlighted,
                            "timestamp": hit.get("timestamp", ""),
                            "pdf_link": f"file://{os.path.abspath(os.path.join('pdfs', hit.get('filename', '')))}"
                        }
                        search_results.append(result)
                
                if not search_results:
                    return {"results": [], "total": 0, "file_count": 0}
                
                return {
                    "results": search_results,
                    "total": len(search_results),
                    "file_count": len(set(r["filename"] for r in search_results))
                }
        
        except Exception as e:
            print(f"Search error: {str(e)}")
            return {"results": [], "total": 0, "file_count": 0}

    def format_search_results(self, results: List[Dict], page: int, page_size: int, grouped: bool = True) -> Dict:
        """Format search results with proper highlighting and context."""
        if not results:
            return {"results": [], "total": 0, "file_count": 0, "page": page, "pages": 0, "grouped": grouped}
            
        formatted_results = []
        
        if grouped:
            grouped_results = {}
            for result in results:
                filename = result["filename"]
                if filename not in grouped_results:
                    grouped_results[filename] = result
            formatted_results = list(grouped_results.values())
        else:
            formatted_results = results
        
        formatted_results.sort(key=lambda x: x["filename"])
        
        total_results = len(formatted_results)
        start_idx = (page - 1) * page_size
        end_idx = min(start_idx + page_size, total_results)
        
        page_results = formatted_results[start_idx:end_idx]
        file_count = len(set(r["filename"] for r in formatted_results))
        total_pages = max(1, (total_results + page_size - 1) // page_size)
        
        return {
            "results": page_results,
            "total": total_results,
            "file_count": file_count,
            "page": page,
            "pages": total_pages,
            "grouped": grouped
        }

def keyword_search(
    pdf_directory: str,
    index_directory: str,
    operation: str = "search",
    search_query: Optional[str] = None
) -> Dict[str, Any]:
    """
    Main function to handle PDF processing and searching.
    
    Args:
        pdf_directory (str): Directory containing PDF files
        index_directory (str): Directory for search index
        operation (str): Either "index" or "search"
        search_query (str, optional): Search query if operation is "search"
        
    Returns:
        Dict containing operation results and status
    """
    try:
        # Initialize components
        pdf_processor = PDFProcessor(pdf_directory)
        search_engine = SearchEngine(index_directory)
        
        # Prepare response structure
        response = {
            "status": "success",
            "message": "",
            "operation": operation,
            "timestamp": datetime.now().isoformat(),
            "results": {}
        }
        
        if operation == "index":
            # Extract text from all PDFs
            extracted_data = pdf_processor.extract_all_pdfs()
            
            if not extracted_data:
                response["status"] = "warning"
                response["message"] = "No PDFs found to index"
                return response
            
            # Index the documents
            search_engine.index_documents(extracted_data)
            
            response["message"] = f"Successfully indexed {len(extracted_data)} documents"
            response["results"] = {
                "indexed_files": [data["filename"] for data in extracted_data],
                "total_files": len(extracted_data)
            }
            
        elif operation == "search":
            if not search_query:
                response["status"] = "error"
                response["message"] = "Search query is required for search operation"
                return response
            
            # Perform search
            search_results = search_engine.search(search_query)
            
            response["message"] = f"Found {search_results['total']} results"
            response["results"] = search_results
            
        else:
            response["status"] = "error"
            response["message"] = f"Invalid operation: {operation}"
            
        return response
        
    except Exception as e:
        return {
            "status": "error",
            "message": f"Error during {operation}: {str(e)}",
            "operation": operation,
            "timestamp": datetime.now().isoformat(),
            "results": {}
        }

def print_json(data):
    """Print JSON data in a clean format"""
    # Clean up newlines and escape characters in the results
    if isinstance(data, dict) and 'results' in data:
        if 'results' in data['results']:  # Search results
            for result in data['results']['results']:
                if 'content' in result:
                    result['content'] = re.sub(r'[\n\r]+', ' ', result['content'])
                if 'highlight' in result:
                    # Preserve HTML tags for highlighting but clean up newlines
                    result['highlight'] = re.sub(r'[\n\r]+', ' ', result['highlight'])
    print(json.dumps(data, indent=2))

def interactive_mode():
    """Run the application in interactive mode"""
    while True:
        print("\n=== PDF Search System ===")
        print("1. Index PDFs")
        print("2. Search PDFs")
        print("3. Exit")
        
        choice = input("\nEnter your choice (1-3): ").strip()
        
        if choice == "1":
            pdf_dir = input("Enter PDF directory path [pdfs]: ").strip() or "pdfs"
            index_dir = input("Enter index directory path [index]: ").strip() or "index"
            
            print("\nIndexing PDFs...")
            result = keyword_search(
                pdf_directory=pdf_dir,
                index_directory=index_dir,
                operation="index"
            )
            print("\nIndexing Result:")
            print_json(result)
            
        elif choice == "2":
            pdf_dir = input("Enter PDF directory path [pdfs]: ").strip() or "pdfs"
            index_dir = input("Enter index directory path [index]: ").strip() or "index"
            query = input("Enter search query: ").strip()
            
            if not query:
                print("Error: Search query cannot be empty")
                continue
            
            try:
                result = keyword_search(
                    pdf_directory=pdf_dir,
                    index_directory=index_dir,
                    operation="search",
                    search_query=query
                )
                print("\nSearch Results:")
                print_json(result)
                
            except ValueError as e:
                print(f"Error: {str(e)}")
            
        elif choice == "3":
            print("Goodbye!")
            sys.exit(0)
        
        else:
            print("Invalid choice. Please try again.")
        
        input("\nPress Enter to continue...")

if __name__ == "__main__":
    interactive_mode() 
